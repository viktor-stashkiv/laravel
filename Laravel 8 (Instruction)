Bстановлення Laravel
composer create-project laravel/laravel назва_проекту



Створення контроллерів
php artisan make:controller назва_контроллераController



Фікс роботи контроллерів 
Перейти в app/Providers/RouteServiceProvider.php та розкоментувати код
protected $namespace = 'App\\Http\\Controllers';



Роутинг 
Route::get('/', function () {
    return view('welcome');
});

<a href="{{ route('post.show',$post->id) }}"> Any text </a> // Другий параметр приймає те що буде підставлятися наприклад id

Route::get('/home','MyPlaceController@index'); // назва_контроллера@функція_в_контроллері




Cтворення моделі 
php artisan make:model Назва_моделі -m // -m модель зв'язати із міграцією




Створення таблиці 
public function up()
    {
        Schema::create('posts', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->text('content');
            $table->string('image');
            $table->unsignedBigInteger('Likes')->nullable();
            $table->boolean('is_published')->default(0);
            $table->timestamps();
        });
    }

Міграція php artisan migrate

dd(змінна) - dump die




Пошук в БД 
public function index(){
        $post = Post::find(1);
        dd($post->title);
        
        ***
        
        $posts = Post::all();
        
        ***
        
        $posts = Post::where('is_published',1)->get(); // поверне всі елементи із значенням 1
        $posts = Post::where('is_published',1)->first(); // поверне тільки перший одемент зі значенням 1
        foreach($posts as $post){
            dump($post->title);
        }
        
        *** 
        
    }




Виведення даних із БД в окремій сторінці по id
Route::get('/posts/{post}','PostController@show')->name('post.show');

@extends('layouts.main')

@section('content')
        <div>{{ $post->id }} . {{$post->title }}</div>
        <div>{{ $post->content }} </div>
       
        <div>
            <a href="{{ route('post.index') }}">Back</a>
        </div>
@endsection

public function show(Post $post)
    {

        return view('post.show',compact('post'));
    }



Вставлення даних в БД INSERT

По дефолту стоїть захист від добавлення в БД, щоб зняти захист потрібно перейти в модель і добавити в клас моделі атрибут:
protected $guarded = false; // or value []
***
class Post extends Model
{
    use HasFactory;
    protected $table = 'posts'; // зв'язка з конкретною таблицею в БД
    protected $guarded = false; // or value []
}

public function create()
    {
        $postArr = [
            [
                'title' => 'Title 3',
                'content' => 'Content 3',
                'image' => 'img/3.png',
                'likes' => 25,
                'is_published' => 1,
            ],
            [
                'title' => 'Title 4',
                'content' => 'Content 4',
                'image' => 'img/4.png',
                'likes' => 100,
                'is_published' => 1,
            ],
        ];
        

        foreach ($postArr as $item)
        {
            Post::create($item);
        }
    }
    
***
Route::get('/posts/create','PostController@create')->name('post.create');
Route::post('/posts/create','PostController@store')->name('post.store');

@extends('layouts.main')

@section('content')
    <div>
        <form action="{{ route('post.store') }}" method="post">
            @csrf
            <div class="form-group">
                <label for="title">Title</label>
                <input type="text" name="title" class="form-control" id="title" placeholder="Title">
            </div>

            <div class="form-group">
                <label for="content">Content</label>
                <textarea class="form-control" name="content" id="content" placeholder="Content"></textarea>
            </div>

            <div class="form-group">
                <label for="image">Image</label>
                <input type="text" name="image" class="form-control" id="image" placeholder="Image">
            </div>
            <br>
            <button type="submit" class="btn btn-primary">Create</button>
        </form>
    </div>
@endsection


public function create()
    {
        return view('post.create');
    }

    public function store()
    {
        $data = request()->validate([
            'title' => 'string',
            'content' => 'string',
            'image' => 'string',
        ]);
        Post::create($data);

        return redirect()->route('post.index');
    }




Оновлення даних в БД UPDATE
public function update()
    {
        $post = Post::find(6); // шукаємо потрібне ID та виконуємо оновлення даних

        $post->update([
            'title' => 'updated',
            'content' => 'update 4',
            'image' => 'update/4.png',
            'likes' => 10,
            'is_published' => 0,
        ]);
    }
***
Route::get('/posts/{post}/edit','PostController@edit')->name('post.edit');
Route::patch('/posts/{post}','PostController@update')->name('post.update');

@extends('layouts.main')

@section('content')
    <div>
        <form action="{{ route('post.update',$post->id) }}" method="post">
            @csrf
            @method('patch')
            <div class="form-group">
                <label for="title">Title</label>
                <input type="text" name="title" class="form-control" id="title" placeholder="Title" value="{{ $post->title }}">
            </div>

            <div class="form-group">
                <label for="content">Content</label>
                <textarea class="form-control" name="content" id="content" placeholder="Content">{{ $post->content }}</textarea>
            </div>

            <div class="form-group">
                <label for="image">Image</label>
                <input type="text" name="image" class="form-control" id="image" placeholder="Image" value="{{ $post->image }}">
            </div>
            <br>
            <button type="submit" class="btn btn-primary">Update</button>
        </form>
    </div>
@endsection

 public function edit(Post $post)
    {
        return view('post.edit',compact('post'));
    }

    public function update(Post $post)
    {
        $data = request()->validate([
            'title' => 'string',
            'content' => 'string',
            'image' => 'string',
        ]);
        $post->update($data);

        return redirect()->route('post.show',$post->id);
    }




Видалення даних в БД DELETE
public function delete()
    {
        $post = Post::find(6);
        $post->delete();
        dd('Delete');
    }


SOFT DELETE

В класі міграції добавити 
 $table->softDeletes();
 Далі в моделі добавити трейт
 use SoftDeletes;
 Та перезаписати міграцію командою
 php artisan migrate:fresh
 
 Відновити з бази умовно видалений запис в Контроллері прописати
 $post = Post::withTrashed()->find(2);
 $post->restore();
 
 ***
 Route::delete('/posts/{post}','PostController@destroy')->name('post.delete');
 
 <form action="{{ route('post.delete', $post->id) }}" method="post">
                @csrf
                @method('delete')
                <input type="submit" value="Delete" class="btn btn-danger">
 </form>
 
 public function destroy(Post $post)
    {
        $post->delete();

        return redirect()->route('post.index');
    }
 
 
 
 
 Вставити в БД дані якщо дані вже існують то повернути FIRST_OR_CREATE
 public function firstOrCreate()
    {

        $post = Post::firstOrCreate([
            'title' => 'Title 5'
        ],[
            'title' => 'Title 5',
            'content' => 'Content 5',
            'image' => 'img/5.png',
            'likes' => 108,
            'is_published' => 0,
        ]);

        dd($post);
    }




Оновити в БД дані якщо дані вже існують то створити UPDATE_OR_CREATE
 public function updateOrCreate()
    {
        $post = Post::updateOrCreate([
            'title' => 'Title 5'
        ],[
            'title' => 'Title 6',
            'content' => 'Content 5',
            'image' => 'img/5.png',
            'likes' => 108,
            'is_published' => 0,
        ]);
    }




Міграції добавлення колонки
 php artisan make:migration add_column_description_to_posts_table
 php artisan migrate
 
 php artisan migrate:rollback // відкат на один крок
 
 public function up()
    {
        Schema::table('posts', function (Blueprint $table) {
            $table->text('description')->nullable()->after('content'); // after() - добавити після колонки
        });
    }


Видалення міграції функції мають бути дзеркальні
php artisan make:migration delete_description_to_posts_table
 public function up()
    {
        Schema::table('posts', function (Blueprint $table) {
            $table->dropColumn('description');
        });
    }
    
    public function down()
    {
        Schema::table('posts', function (Blueprint $table) {
            $table->text('description')->nullable()->after('content');
        });
    }



Редагування колонок перенейменування EDIT
php artisan make:migration edit_column_content_to_posts_table
public function up()
    {
        Schema::table('posts', function (Blueprint $table) {
            $table->renameColumn('content','post_content');
        });
    }
    
    public function down()
    {
        Schema::table('posts', function (Blueprint $table) {
            $table->renameColumn('post_content','content');
        });
    }

composer require doctrine/dbal 3.2.2
    


VIEW вигляд 
public function index()
    {
        $posts = Post::all();

        return view('posts',compact('posts')); // аргументи
    }
    
posts.blade.php 
@foreach($posts as $post)
        <div>{{$post->title }}</div>
        <div>{{$post->content }}</div>
        <div>{{$post->likes }}</div>
@endforeach



Псевдонім роуту 
Route::get('/main','MainController@index')->name('main.index');



Шаблонізатор blade

</div>
    @yield('content') // тут буде вставлятися html
</body>

Підключення головного шаблону
@extends('layouts.main')

@section('content')
    <div>Contacts</div>
@endsection




Підключення стилів та bootstrap
composer require laravel/ui --dev
  php artisan ui bootstrap
  npm install && npm run dev
  npm run dev 
  npm run watch // оновлювати стилі автоматично
  
  Якщо помилка то прописати npm install autoprefixer@10.4.5 --save-exact 

  <link rel="stylesheet" href="{{ asset('css/app.js')  }}">
  
  
  
  
Форми та POST CREATE
@extends('layouts.main')

@section('content')
    <div>
        <form action="{{ route('post.store') }}" method="post">
            @csrf
            <div class="form-group">
                <label for="title">Title</label>
                <input type="text" name="title" class="form-control" id="title" placeholder="Title">
            </div>

            <div class="form-group">
                <label for="content">Content</label>
                <textarea class="form-control" name="content" id="content" placeholder="Content"></textarea>
            </div>

            <div class="form-group">
                <label for="image">Image</label>
                <input type="text" name="image" class="form-control" id="image" placeholder="Image">
            </div>
            <br>
            <button type="submit" class="btn btn-primary">Create</button>
        </form>
    </div>
@endsection

Route::get('/posts/create','PostController@create');
Route::post('/posts/create','PostController@store')->name('post.store');

  public function store()
    {
        $data = request()->validate([
            'title' => 'string',
            'content' => 'string',
            'image' => 'string',
        ]);
        Post::create($data);

        return redirect()->route('post.index');
    }
    
    
    
    
FindOrFail()
public function show($id)
    {
        $post = Post::findOrFail($id); // Якщо нема такого значення в БД то повернути сторінку 404
        dd($post);
    }

 public function show(Post $post) // Клас моделі (Post $post) Поверене сторінку 404 якщо такого значення не буде в БД
    {
        // В аргуметах функції одразу приходять дані ($post = Post::find(id_url))
        return view('post.show',compact('post'));
    }
    
Зовнішній ключ
$table->unsignedBigInteger('category_id')->nullable();
$table->index('category_id','post_category_idx'); // створення індекса з назвою post_category_idx

$table->foreign('category_id','post_category_fk')->on('categories')->references('id'); // вибір поля для зовнішнього ключа, назва, в якій таблиці та поле  
php artisan migrate:fresh



HasMany()
В моделі створити метод наприклад posts для категорій
class Category extends Model
{
    use HasFactory;

    public function posts() *** 
    {
        return $this->hasMany(Post::class,'category_id','id'); // 1 - таблиця(*модель*) з якої будуть повернуті дані 2 - назва зовнішнього ключа 3 - id для зов. ключа
        
        // дані повернуться в контроллер при імпорті таблиці(*моделі*) в клас
    }
}

public function index()
    {
        $category = Category::find(1);
        dd($category->posts); // Поверне всі пости в яких category_id = 1 із моделі Post
    }



belongsTo()
class Post extends Model
{
    use HasFactory;
    use SoftDeletes;
    protected $table = 'posts';
    protected $guarded = false; // or value []
    
    public function category()
    {
    	return belongsTo(Category::class,'category_id','id);
    }
}
    
    
    
    
belongsToMany()
public function tags()
    {
        return $this->belongsToMany(Tag::class,'post_tags','post_id','tag_id');
    }



Multiple selects
<div class="form-group">
                <label for="tags">Tags</label>
                <select multiple class="form-control" name="tags[]" id="tags">

                    @foreach($tags as $tag)
                        <option value="{{ $tag->id }}">{{ $tag->title }}</option>
                    @endforeach

          	</select>
</div>

public function store()
    {
        $data = request()->validate([
            'title' => 'string',
            'content' => 'string',
            'image' => 'string',
            'category_id' => '',
            'tags' => '',
        ]);

        $tags = $data['tags'];
        unset($data['tags']);

        $post = Post::create($data);


        /*foreach ($tags as $tag) // костиль
        {
            PostTag::firstOrCreate([
                'tag_id' => $tag,
                'post_id' => $post->id,
            ]);
        }*/

        $post->tags()->attach($tags); // Привз'язує окремий масив до загального запиту SQL
        $post->tags()->sync($tags); // Привз'язує окремий масив до загального запиту SQL з видаленням старих даних використовується для оновлення даних UPDATE


        return redirect()->route('post.index');
    }
    
    
    
    
Error помилки обробка 

$data = request()->validate([
            'title' => 'required|string',
            'content' => 'string',
            'image' => 'string',
            'category_id' => '',
            'tags' => '',
        ]);
        
@error('title') // якщо поле title пусто то спрацює цей код
         <p class="text-danger">{{ $message }}</p>
@enderror

{{ old('title') }} // поверне старі дані в value якщо якесь з полів не пройшло валідацію
 
  
  

Зв'язка по конвенції Laravel 
  php artisan make:model Post -m
  php artisan make:model Category -m
  php artisan make:model Tag -m
  php artisan make:migration create_post_tag --create
  php artisan migrate:fresh  
  
  public function index()
    {
        $post = Post::find(1);
        $category = Category::find(1);
        dd($category->posts);
        dd($post->category);
    }
    
class Post extends Model
{
    use HasFactory;

    public function category()
    {
        return $this->belongsTo(Category::class);
    }
}

class Category extends Model
{
    use HasFactory;

    public function posts()
    {
        return $this->hasMany(Post::class);
    }
}



Group
Route::group(['namespace' => 'Post'],function (){
    Route::get('/posts','IndexController')->name('post.index');
    Route::get('/posts/create','CreateController')->name('post.create');

    Route::post('/posts/create','StoreController')->name('post.store');
    Route::get('/posts/{post}','ShowController')->name('post.show');
    Route::get('/posts/{post}/edit','EditController')->name('post.edit');
    Route::patch('/posts/{post}','UpdateController')->name('post.update');
    Route::delete('/posts/{post}','DestroyController')->name('post.delete');
});




Request для однометодних класів
php artisan make:request Post/StoreRequest // створить папку Post а в ній клас StoreRequest

class StoreRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true; // true - буде працювати fasle - ні
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules() // правила для валідації
    {
        return [
                'title' => 'required|string',
                'content' => 'string',
                'image' => 'string',
                'category_id' => '',
                'tags' => '',
        ];
    }
}


public function __invoke(UpdateRequest $request,Post $post)
    {
        $data = $request->validated(); // поверне масив ключ => значення
    }





Seed and Factory
php artisan make:factory PostFactory -m Post // створити фабрику та зв'язати з моделлю Post

<?php

namespace Database\Factories;

use App\Models\Category;
use Illuminate\Database\Eloquent\Factories\Factory;

class PostFactory extends Factory
{
    //protected $model = Post::class; // зв'язка з моделлю
    /**
     * Define the model's default state.
     *
     * @return array
     */
    public function definition()
    {
        return [
            'title' => $this->faker->title,
            'content' => $this->faker->text,
            'image' => $this->faker->imageUrl(),
            'likes' => random_int(1,2000),
            'is_published' => 1,
            'category_id' => Category::get()->random()->id,
        ];
    }
}

Seed class

<?php

namespace Database\Seeders;

use App\Models\Post;
use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     *
     * @return void
     */
    public function run()
    {
        Post::factory(100)->create(); // 100 - кількість записів

        // \App\Models\User::factory(10)->create();
    }
}

php artisan migrate --seed // виконати міграцію 
php artisan migrate:fresh --seed



Пагінація Pagination
class IndexController extends BaseController
{
    public function __invoke()
    {
        $posts = Post::paginate(10); **** // по скільки постів відображати

        return view('post.index',compact('posts'));
    }
}

php artisan vendor:publish --tag=laravel-pagination

Заходимо в App\Providers\AppServiceProvider

public function boot()
    {
        Paginator::defaultView('vendor.pagination.bootstrap-4');
    }
    
Виводимо

<div class="mt-3">
        {{ $posts->links() }}
</div>



Filters фільтр нариклад http://localhost:8000/posts?category_id=5&title=abc
Створити Request 
<?php

namespace App\Http\Requests\Post;

use Illuminate\Foundation\Http\FormRequest;

class FilterRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            'title' => 'string',
            'content' => 'string',
            'image' => 'string',
            'category_id' => '',
            'tags' => '',
        ];
    }
}

Створити в Http папку Filters та в ній 3 класи
<?php

namespace App\Http\Filters;

use Illuminate\Database\Eloquent\Builder;

interface FilterInterface
{
    public function apply(Builder $builder);
}


<?php

namespace App\Http\Filters;

use Illuminate\Database\Eloquent\Builder;

abstract class AbstractFilter implements FilterInterface
{
    /** @var array */
    private $queryParams = [];

    /**
     * AbstractFilter constructor.
     *
     * @param array $queryParams
     */
    public function __construct(array $queryParams)
    {
        $this->queryParams = $queryParams;
    }

    abstract protected function getCallbacks(): array;

    public function apply(Builder $builder)
    {
        $this->before($builder);

        foreach ($this->getCallbacks() as $name => $callback) {
            if (isset($this->queryParams[$name])) {
                call_user_func($callback, $builder, $this->queryParams[$name]);
            }
        }
    }

    /**
     * @param Builder $builder
     */
    protected function before(Builder $builder)
    {
    }

    /**
     * @param string $key
     * @param mixed|null $default
     *
     * @return mixed|null
     */
    protected function getQueryParam(string $key, $default = null)
    {
        return $this->queryParams[$key] ?? $default;
    }

    /**
     * @param string[] $keys
     *
     * @return AbstractFilter
     */
    protected function removeQueryParam(string ...$keys)
    {
        foreach ($keys as $key) {
            unset($this->queryParams[$key]);
        }

        return $this;
    }
}


<?php

namespace App\Http\Filters;

use Illuminate\Database\Eloquent\Builder;

class PostFilter extends AbstractFilter
{
    public const TITLE = 'title';
    public const CONTENT = 'content';
    public const CATEGORY_ID = 'category_id';


    protected function getCallbacks(): array
    {
        return [
            self::TITLE => [$this, 'title'],
            self::CONTENT => [$this, 'content'],
            self::CATEGORY_ID => [$this, 'categoryId'],
        ];
    }

    public function title(Builder $builder, $value)
    {
        $builder->where('title', 'like', "%{$value}%");
    }

    public function content(Builder $builder, $value)
    {
        $builder->where('content', 'like', "%{$value}%");
    }

    public function categoryId(Builder $builder, $value)
    {
        $builder->where('category_id', $value);
    }
}

Створити в в моделях папку Trais
<?php

namespace App\Models\Traits;

use App\Http\Filters\FilterInterface;
use Illuminate\Database\Eloquent\Builder;

trait Filterable
{

    /**
     * @param Builder $builder
     * @param FilterInterface $filter
     *
     * @return Builder
     */
    public function scopeFilter(Builder $builder, FilterInterface $filter)
    {
        $filter->apply($builder);

        return $builder;
    }
}

Та реалізувати старт
class IndexController extends BaseController
{
    public function __invoke(FilterRequest $request)
    {
        $data = $request->validated();

        $filter = app()->make(PostFilter::class,['queryParams' => array_filter($data)]);

        $posts = Post::filter($filter)->paginate(10);


        return view('post.index',compact('posts'));
    }
}

Вигляд
<div class="mt-3">
        {{ $posts->withQueryString()->links() }} // пагінація з урахуванням query string
</div>




Auth
php artisan ui:auth





Middleware
 php artisan make:middleware AdminPanelMiddleware
 
 Route::group(['namespace' => 'Admin','prefix' => 'admin', 'middleware***' => 'admin'],function (){
    Route::group(['namespace' => 'Post'],function (){
        Route::get('/post','IndexController')->name('admin.post.index');
    });
});





Policy
php artisan make:policy AdminPolicy -m User

 public function view(User $user, User $model)
    {
        return $model->role === 'admin';
        
    }
    
protected $policies = [ ***************
        // 'App\Models\Model' => 'App\Policies\ModelPolicy',
        User::class => AdminPolicy::class,
    ];
    
public function __invoke(FilterRequest $request)
    {
        $this->authorize('view',auth()->user());
        }

@can('view',auth()->user())
                    <li class="nav-item">
                        <a class="nav-link" href="{{route('admin.post.index')}}">Admin</a>
                    </li>
@endcan



Resurces CSRF OFF
php artisan make:resource Post/PostResource // створити ресурс в папці Post

ресурс повертає масив 
 
    public function toArray($request)
    {
        return
            [
                'id' => $this->id,
                'title' => $this->title,
                'content' => $this->content,
                'image' => $this->image,
            ];
    }
    
    CSRF OFF
    Http/Middleware/VerifyCsrfToken.php
    protected $except = [
        '/posts',
        '/posts/*'
    ];
    
    
    
    class UpdateController extends BaseController
{
    public function __invoke(UpdateRequest $request,Post $post)
    {
        $data = $request->validated();

        $this->service->update($post,$data);

        return new PostResource($post); ***

        //return redirect()->route('post.show',$post->id);
    }

}
    
    
    
    class IndexController extends BaseController
{
    public function __invoke(FilterRequest $request)
    {
        //$this->authorize('view',auth()->user());

        $data = $request->validated();
        
        $page = $data['page'] ?? 1; ***
        $perPage = $data['perPage'] ?? 10; ***


        $filter = app()->make(PostFilter::class,['queryParams' => array_filter($data)]);

        $posts = Post::filter($filter)->paginate($perPage, ['*'], 'page', $page); ***

        return PostResource::collection($posts); ***
        //return view('post.index',compact('posts'));
    }
}



JWT
http://localhost:8000/api/auth/login?email=stashkiv77@gmail.com&password=20010602333

    php artisan jwt:secret
    lCOrV5WNVcVrL7X4posLS7FaW1DUvizVNw35BZet1PXn6DVGWfTPez3vDFPzJnVY




Guzzle HTTP

<?php

namespace App\Components;

use GuzzleHttp\Client;

class importDataClient
{
    public $client;

    public function __construct()
    {
        $this->client = new Client([
           
            'base_uri' => 'https://jsonplaceholder.typicode.com/',
           
            'timeout'  => 2.0,
            'verify' => false, // відключення https
        ]);
    }
}



***
public function handle()
    {
        $import = new ImportDataClient();
        $response = $import->client->request('GET','posts');
        $data = json_decode($response->getBody()->getContents());
    }
    
    
BLOG ********************************************************************************

composer require laravel/ui
php artisan ui bootstrap
php artisan ui:auth

npm install && npm run dev
npm run dev

php artisan migrate

 public function up()
    {
        Schema::create('posts', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->text('content');
            $table->unsignedBigInteger('category_id')->nullable();
            $table->index('category_id','post_category_idx');
            $table->foreign('category_id','post_category_fk')->on('categories')->references('id');
            $table->timestamps();
        });
    }
    
    
      public function up()
    {
        Schema::create('post_tags', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('post_id');
            $table->unsignedBigInteger('tag_id');
            $table->timestamps();

            // IDX
            $table->index('post_id','post_tag_post_idx');
            $table->index('tag_id','post_tag_tag_idx');

            // FK
            $table->foreign('post_id','post_tag_post_fk')->on('posts')->references('id');
            $table->foreign('tag_id','post_tag_tag_fk')->on('tags')->references('id');

        });


class Category extends Model
{
    use HasFactory;

    protected $table = 'categories'; // явна прив'язка моделі до таблиці в БД
    protected $guarded = false; // можливість запису даних в БД
}

Route::group(['namespace' => 'Main'],function() {
    Route::get('/','IndexController')->name('main.index');
});

Route::group(['namespace' => 'Admin','prefix' => 'admin'], function() {
    Route::group(['namespace' => 'Main'],function() {
        Route::get('/','IndexController')->name('admin.main.index');
    });

    Route::group(['namespace' => 'Category','prefix' => 'categories'], function() {
        Route::get('/','IndexController')->name('admin.categories.index');
        Route::get('/create','CreateController')->name('admin.categories.create');
        Route::post('/','StoreController')->name('admin.categories.store');
    });
});



Auth::routes();


php artisan make:request Admin/Category/StoreRequest

class StoreController extends Controller
{
    public function __invoke(StoreRequest $request)
    {
        $data = $request->validated();
        Category::FirstOrCreate(['title' => $data['title']],[
            'title' => $data['title']
        ]);

        return redirect()->route('admin.categories.index');
    }
}

php artisan make:migration add_column_soft_deletes_to_categories_table
php artisan make:migration add_columns_for_images_to_posts_table

 public function up()
    {
        Schema::table('posts', function (Blueprint $table) {
            $table->string('preview_image')->nullable();
            $table->string('main_image')->nullable();
        });
    }
    
     public function down()
    {
        Schema::table('posts', function (Blueprint $table) {
            $table->dropColumn('preview_image');
            $table->dropColumn('main_image');
        });
    }
    
    

Storage 
 $data['preview_image'] = Storage::put('/images', $data['preview_image']);
        $data['main_image'] = Storage::put('/images', $data['main_image']);















  
  



  
  




    
    


 
 
 



    
    
    
