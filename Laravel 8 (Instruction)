Bстановлення Laravel
composer create-project laravel/laravel назва_проекту



Створення контроллерів
php artisan make:controller назва_контроллераController



Фікс роботи контроллерів 
Перейти в app/Providers/RouteServiceProvider.php та розкоментувати код
protected $namespace = 'App\\Http\\Controllers';



Роутинг 
Route::get('/', function () {
    return view('welcome');
});

<a href="{{ route('post.show',$post->id) }}"> Any text </a> // Другий параметр приймає те що буде підставлятися наприклад id

Route::get('/home','MyPlaceController@index'); // назва_контроллера@функція_в_контроллері




Cтворення моделі 
php artisan make:model Назва_моделі -m // -m модель зв'язати із міграцією




Створення таблиці 
public function up()
    {
        Schema::create('posts', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->text('content');
            $table->string('image');
            $table->unsignedBigInteger('Likes')->nullable();
            $table->boolean('is_published')->default(0);
            $table->timestamps();
        });
    }

Міграція php artisan migrate

dd(змінна) - dump die




Пошук в БД 
public function index(){
        $post = Post::find(1);
        dd($post->title);
        
        ***
        
        $posts = Post::all();
        
        ***
        
        $posts = Post::where('is_published',1)->get(); // поверне всі елементи із значенням 1
        $posts = Post::where('is_published',1)->first(); // поверне тільки перший одемент зі значенням 1
        foreach($posts as $post){
            dump($post->title);
        }
        
        *** 
        
    }




Виведення даних із БД в окремій сторінці по id
Route::get('/posts/{post}','PostController@show')->name('post.show');

@extends('layouts.main')

@section('content')
        <div>{{ $post->id }} . {{$post->title }}</div>
        <div>{{ $post->content }} </div>
       
        <div>
            <a href="{{ route('post.index') }}">Back</a>
        </div>
@endsection

public function show(Post $post)
    {

        return view('post.show',compact('post'));
    }



Вставлення даних в БД INSERT

По дефолту стоїть захист від добавлення в БД, щоб зняти захист потрібно перейти в модель і добавити в клас моделі атрибут:
protected $guarded = false; // or value []
***
class Post extends Model
{
    use HasFactory;
    protected $table = 'posts'; // зв'язка з конкретною таблицею в БД
    protected $guarded = false; // or value []
}

public function create()
    {
        $postArr = [
            [
                'title' => 'Title 3',
                'content' => 'Content 3',
                'image' => 'img/3.png',
                'likes' => 25,
                'is_published' => 1,
            ],
            [
                'title' => 'Title 4',
                'content' => 'Content 4',
                'image' => 'img/4.png',
                'likes' => 100,
                'is_published' => 1,
            ],
        ];
        

        foreach ($postArr as $item)
        {
            Post::create($item);
        }
    }
    
***
Route::get('/posts/create','PostController@create')->name('post.create');
Route::post('/posts/create','PostController@store')->name('post.store');

@extends('layouts.main')

@section('content')
    <div>
        <form action="{{ route('post.store') }}" method="post">
            @csrf
            <div class="form-group">
                <label for="title">Title</label>
                <input type="text" name="title" class="form-control" id="title" placeholder="Title">
            </div>

            <div class="form-group">
                <label for="content">Content</label>
                <textarea class="form-control" name="content" id="content" placeholder="Content"></textarea>
            </div>

            <div class="form-group">
                <label for="image">Image</label>
                <input type="text" name="image" class="form-control" id="image" placeholder="Image">
            </div>
            <br>
            <button type="submit" class="btn btn-primary">Create</button>
        </form>
    </div>
@endsection


public function create()
    {
        return view('post.create');
    }

    public function store()
    {
        $data = request()->validate([
            'title' => 'string',
            'content' => 'string',
            'image' => 'string',
        ]);
        Post::create($data);

        return redirect()->route('post.index');
    }




Оновлення даних в БД UPDATE
public function update()
    {
        $post = Post::find(6); // шукаємо потрібне ID та виконуємо оновлення даних

        $post->update([
            'title' => 'updated',
            'content' => 'update 4',
            'image' => 'update/4.png',
            'likes' => 10,
            'is_published' => 0,
        ]);
    }
***
Route::get('/posts/{post}/edit','PostController@edit')->name('post.edit');
Route::patch('/posts/{post}','PostController@update')->name('post.update');

@extends('layouts.main')

@section('content')
    <div>
        <form action="{{ route('post.update',$post->id) }}" method="post">
            @csrf
            @method('patch')
            <div class="form-group">
                <label for="title">Title</label>
                <input type="text" name="title" class="form-control" id="title" placeholder="Title" value="{{ $post->title }}">
            </div>

            <div class="form-group">
                <label for="content">Content</label>
                <textarea class="form-control" name="content" id="content" placeholder="Content">{{ $post->content }}</textarea>
            </div>

            <div class="form-group">
                <label for="image">Image</label>
                <input type="text" name="image" class="form-control" id="image" placeholder="Image" value="{{ $post->image }}">
            </div>
            <br>
            <button type="submit" class="btn btn-primary">Update</button>
        </form>
    </div>
@endsection

 public function edit(Post $post)
    {
        return view('post.edit',compact('post'));
    }

    public function update(Post $post)
    {
        $data = request()->validate([
            'title' => 'string',
            'content' => 'string',
            'image' => 'string',
        ]);
        $post->update($data);

        return redirect()->route('post.show',$post->id);
    }




Видалення даних в БД DELETE
public function delete()
    {
        $post = Post::find(6);
        $post->delete();
        dd('Delete');
    }


SOFT DELETE

В класі міграції добавити 
 $table->softDeletes();
 Далі в моделі добавити трейт
 use SoftDeletes;
 Та перезаписати міграцію командою
 php artisan migrate:fresh
 
 Відновити з бази умовно видалений запис в Контроллері прописати
 $post = Post::withTrashed()->find(2);
 $post->restore();
 
 ***
 Route::delete('/posts/{post}','PostController@destroy')->name('post.delete');
 
 <form action="{{ route('post.delete', $post->id) }}" method="post">
                @csrf
                @method('delete')
                <input type="submit" value="Delete" class="btn btn-danger">
 </form>
 
 public function destroy(Post $post)
    {
        $post->delete();

        return redirect()->route('post.index');
    }
 
 
 
 
 Вставити в БД дані якщо дані вже існують то повернути FIRST_OR_CREATE
 public function firstOrCreate()
    {

        $post = Post::firstOrCreate([
            'title' => 'Title 5'
        ],[
            'title' => 'Title 5',
            'content' => 'Content 5',
            'image' => 'img/5.png',
            'likes' => 108,
            'is_published' => 0,
        ]);

        dd($post);
    }




Оновити в БД дані якщо дані вже існують то створити UPDATE_OR_CREATE
 public function updateOrCreate()
    {
        $post = Post::updateOrCreate([
            'title' => 'Title 5'
        ],[
            'title' => 'Title 6',
            'content' => 'Content 5',
            'image' => 'img/5.png',
            'likes' => 108,
            'is_published' => 0,
        ]);
    }




Міграції добавлення колонки
 php artisan make:migration add_column_description_to_posts_table
 php artisan migrate
 
 php artisan migrate:rollback // відкат на один крок
 
 public function up()
    {
        Schema::table('posts', function (Blueprint $table) {
            $table->text('description')->nullable()->after('content'); // after() - добавити після колонки
        });
    }


Видалення міграції функції мають бути дзеркальні
php artisan make:migration delete_description_to_posts_table
 public function up()
    {
        Schema::table('posts', function (Blueprint $table) {
            $table->dropColumn('description');
        });
    }
    
    public function down()
    {
        Schema::table('posts', function (Blueprint $table) {
            $table->text('description')->nullable()->after('content');
        });
    }



Редагування колонок перенейменування EDIT
php artisan make:migration edit_column_content_to_posts_table
public function up()
    {
        Schema::table('posts', function (Blueprint $table) {
            $table->renameColumn('content','post_content');
        });
    }
    
    public function down()
    {
        Schema::table('posts', function (Blueprint $table) {
            $table->renameColumn('post_content','content');
        });
    }

composer require doctrine/dbal 3.2.2
    


VIEW вигляд 
public function index()
    {
        $posts = Post::all();

        return view('posts',compact('posts')); // аргументи
    }
    
posts.blade.php 
@foreach($posts as $post)
        <div>{{$post->title }}</div>
        <div>{{$post->content }}</div>
        <div>{{$post->likes }}</div>
@endforeach



Псевдонім роуту 
Route::get('/main','MainController@index')->name('main.index');



Шаблонізатор blade

</div>
    @yield('content') // тут буде вставлятися html
</body>

Підключення головного шаблону
@extends('layouts.main')

@section('content')
    <div>Contacts</div>
@endsection




Підключення стилів та bootstrap
composer require laravel/ui --dev
  php artisan ui bootstrap
  npm install && npm run dev
  npm run dev 
  npm run watch // оновлювати стилі автоматично
  
  Якщо помилка то прописати npm install autoprefixer@10.4.5 --save-exact 

  <link rel="stylesheet" href="{{ asset('css/app.js')  }}">
  
  
  
  
Форми та POST CREATE
@extends('layouts.main')

@section('content')
    <div>
        <form action="{{ route('post.store') }}" method="post">
            @csrf
            <div class="form-group">
                <label for="title">Title</label>
                <input type="text" name="title" class="form-control" id="title" placeholder="Title">
            </div>

            <div class="form-group">
                <label for="content">Content</label>
                <textarea class="form-control" name="content" id="content" placeholder="Content"></textarea>
            </div>

            <div class="form-group">
                <label for="image">Image</label>
                <input type="text" name="image" class="form-control" id="image" placeholder="Image">
            </div>
            <br>
            <button type="submit" class="btn btn-primary">Create</button>
        </form>
    </div>
@endsection

Route::get('/posts/create','PostController@create');
Route::post('/posts/create','PostController@store')->name('post.store');

  public function store()
    {
        $data = request()->validate([
            'title' => 'string',
            'content' => 'string',
            'image' => 'string',
        ]);
        Post::create($data);

        return redirect()->route('post.index');
    }
    
    
    
    
FindOrFail()
public function show($id)
    {
        $post = Post::findOrFail($id); // Якщо нема такого значення в БД то повернути сторінку 404
        dd($post);
    }

 public function show(Post $post) // Клас моделі (Post $post) Поверене сторінку 404 якщо такого значення не буде в БД
    {
        // В аргуметах функції одразу приходять дані ($post = Post::find(id_url))
        return view('post.show',compact('post'));
    }
    
    
    
    



  
  




    
    


 
 
 



    
    
    
